pipeline {
   agent any
   
   environment {
        PATH = "$PATH:/usr/bin" // Docker 및 AWS CLI가 설치된 경로에 따라 수정
        ECR_REPO_URI = '477159410287.dkr.ecr.ap-northeast-2.amazonaws.com/itbank08'
        //AWS_ACCESS_ID = credentials('aws-access-key-id')
        //AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key') 
    }
   
    stages {
        stage('Git Clone') {
            steps {
                script {
                    try {
                        git url: "https://github.com/easttop115/itbank08.git", branch: "main", credentialsId: 'github_access_token'
                        env.cloneResult=true
                    } catch (error) {
                        print(error)
                        env.cloneResult=false
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
        stage('ECR Upload') {
            steps {
                script {
                    try {
                        withCredentials([aws(credentialsId: "${AWS_ACCESS_ID}", variable: 'AWS_ACCESS_ID', region: 'ap-northeast-2'),
                                         aws(credentialsId: "${AWS_SECRET_ACCESS_KEY}", variable: 'AWS_SECRET_ACCESS_KEY', region: 'ap-northeast-2')]) {
                            sh """
                                aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REPO_URI
                            """
                        }
                        sh 'docker build -t test-jenkins .'
                        sh "docker tag test-jenkins:latest $ECR_REPO_URI:latest"
                        sh "docker push $ECR_REPO_URI:latest"
                    } catch (error) {
                        print(error)
                        echo 'Remove Deploy Files'
                        sh "rm -rf /var/lib/jenkins/workspace/test-pipeline/*"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
            post {
                success {
                    echo "The ECR Upload stage successfully."
                }
                failure {
                    echo "The ECR Upload stage failed."
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    try {
                        sh """
                           aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                           aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                           aws configure set region ap-northeast-2
                           aws ecs update-service --region ap-northeast-2 --cluster jenkins-test-cluster --service test-jenkins-service --force-new-deployment
                        """
                    } catch (error) {
                        print(error)
                        echo 'Remove Deploy Files'
                        sh "rm -rf /var/lib/jenkins/workspace/test-pipeline/*"
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
            post {
                success {
                    echo "The deploy stage successfully."
                }
                failure {
                    echo "The deploy stage failed."
                }
            }
        }
    }
}

